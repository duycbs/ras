_G.time = 120
_G.Pass = ""
repeat wait() until game:IsLoaded() and game.Players.LocalPlayer:FindFirstChild("DataLoaded")
repeat task.wait()
    if game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Main"):FindFirstChild("ChooseTeam") then
    if string.find(tostring(getgenv().ChooseTeam), "Pirate") then
        for i, v in pairs(
            getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Activated)) do
            v.Function()
        end
    elseif string.find(tostring(getgenv().ChooseTeam), "Marine") then
        for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Marines.Frame.ViewportFrame.TextButton.Activated)) do
            v.Function()
        end
    else
        for i, v in pairs(
            getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Activated)) do
            v.Function()
        end
    end
    end
    until game.Players.LocalPlayer.Team ~= nil
local RAMAccount =
loadstring(game:HttpGet "https://raw.githubusercontent.com/vn4medataweb/data/main/252.txt")()
local MyAccount = RAMAccount.new(game:GetService "Players".LocalPlayer.Name)
if MyAccount then 
function formatNumber(v)
    return tostring(v):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
end
function checkweapon() 
    sw = {}
    local args = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer("getInventory")
for i,v in pairs(args) do 
    if v.Type == "Sword" and (v.Rarity == 3 or v.Rarity == 4 )then
        table.insert(sw,v.Name)
end
end
return table.concat(sw,",")
end
function checkgun() 
    sw = {}
    local args = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer("getInventory")
for i,v in pairs(args) do 
    if v.Type == "Gun" and (v.Rarity == 3 or v.Rarity == 4 )then
        table.insert(sw,v.Name)
end
end
return table.concat(sw,",")
end
function checkfruit()
    local validFruits = {}
    local args = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer("getInventory")

    for i, v in pairs(args) do
        if v.Type == "Blox Fruit" and (v.Rarity == 3 or v.Rarity == 4) then
            table.insert(validFruits, v.Name)
        end
    end

    -- Kiểm tra nếu mảng validFruits chứa cả "Buddha" và "Quake"
    local hasBuddha = false
    local hasQuake = false
    for i, fruit in pairs(validFruits) do
        if fruit == "Leopard-Leopard" then
            hasBuddha = true
        elseif fruit == "Mammoth-Mammoth" then
            hasQuake = true
        end
    end

    local result = ""
    if hasBuddha then
        result = "Leopard-Leopard"
    end
    if hasQuake then
        if result ~= "" then
            result = result .. ", "
        end
        result = result .. "Mammoth-Mammoth"
    end

    return result
end

local getawaken = (function()
	local awks = {}
	local awk = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("getAwakenedAbilities")
	local canreturn;
    local returnmessage; 
    if awk then
    for i, v in pairs(awk) do 
        if v.Awakened then
            table.insert(awks, v.Key)
            canreturn = true
        else
            canreturn = false
            returnmessage = "Not yet"
		end
	end
else
    canreturn = false
    returnmessage = "Not yet"
end
    if canreturn then
	    return table.concat(awks, ", ")
    else
        return returnmessage
    end
end)
function checkmelee()
        local checkmelee = {}
    if game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuySharkmanKarate", true) == 1 then
        table.insert(checkmelee, "Sharkman Karate")
    end
    if game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDeathStep", true) == 1 then
        table.insert(checkmelee, "Death Step")
    end
    if game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyElectricClaw", true) == 1 then
        table.insert(checkmelee, "Electric Claw")
    end
    if game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDragonTalon", true) == 1 then
        table.insert(checkmelee, "Dragon Talon")
    end
    if game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuySuperhuman", true) == 1 then
        table.insert(checkmelee, "Superhuman")
    end
    if game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyGodhuman", true) == 1 then
        table.insert(checkmelee, "Godhuman")
    end
    return table.concat(checkmelee, ", ")
end
function checkgatcan()
    local a = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer("CheckTempleDoor")
if a then 
    return true
    else 
        return false 
end
end
function checkgatcan2()
    cac = {}
    if checkgatcan() then 
        table.insert(cac,"Đã Gạt Cần") 
    else table.insert(cac,"Chưa Gạt Cần")
end
return table.concat(cac)
end
function checkmirrorvamu()
    checkcheck = {}
    for i, v in pairs(game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer("getInventory")    ) do
        if v.Name == "Mirror Fractal" or  v.Name == "Valkyrie Helm" then 
            table.insert(checkcheck,v.Name)
        end
    end
    return table.concat(checkcheck," & ")
end
local function v5()
    local l__LocalPlayer__3 = game.Players.LocalPlayer;
local l__Character__4 = l__LocalPlayer__3.Character;
	for v6, v7 in pairs({ "Last Resort", "Agility", "Water Body", "Heavenly Blood", "Heightened Senses", "Energy Core" }) do
		if l__LocalPlayer__3.Backpack:FindFirstChild(v7) then
			return true;
		end;
		if l__Character__4:FindFirstChild(v7) then
			return true;
		end;
	end;
end;
function checkrace()
    race = {}
    local v113 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("Wenlocktoad", "1");
    local v111 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("Alchemist", "1")
    if game.Players.LocalPlayer.Character:FindFirstChild("RaceTransformed") then
        table.insert(race,game.Players.LocalPlayer.Data.Race.Value.." V4")
    end
 if v113 == -2 and not game.Players.LocalPlayer.Character:FindFirstChild("RaceTransformed") then 
         table.insert(race,game.Players.LocalPlayer.Data.Race.Value.." V3")
 end
if v111 == -2 and not v5() and not game.Players.LocalPlayer.Character:FindFirstChild("RaceTransformed") then 
        table.insert(race,game.Players.LocalPlayer.Data.Race.Value.." V2") 
end 
if not game:GetService("Players").LocalPlayer.Data.Race:FindFirstChild("Evolved") and not v5() and not game.Players.LocalPlayer.Character:FindFirstChild("RaceTransformed") then

    table.insert(race,game.Players.LocalPlayer.Data.Race.Value.." V1")
end
    return table.concat(race)
end
database = {}
datainv = {}
function setalias()
    asdas = {}
    table.insert(asdas,game:GetService("Players").LocalPlayer.Data.Level.Value)
    if game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyGodhuman", true) == 1 then
        table.insert(asdas, "GOD")
    end
    for i,v in pairs(game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer("getInventory")) do 
        if v.Name == "Cursed Dual Katana" then 
            table.insert(asdas,"CDK")
        end
        if v.Name == "Soul Guitar" then 
            table.insert(asdas,"SG")
        end
        if v.Name == "Mirror Fractal" then 
        if v.Name == "Valkyrie Helm" then 
            table.insert(asdas,"MM")
        end
        end
    end
 --table.insert(asdas,checkrace())
return table.concat(asdas,"-")
end
function CheckAcientOneStatus()
    status = {}
    if not game.Players.LocalPlayer.Character:FindFirstChild("RaceTransformed") then
    return "No Gear"
    end;
    local v227 = nil;
    local v228 = nil;
    local v229 = nil;
    v229, v228, v227 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("UpgradeRace", "Check");
    if v229 == 1 then
    return "Required Train More"
    elseif v229 == 2 or v229 == 4 or v229 == 7 then
    return "Can Buy Gear With "..v227.." Fragments"
    elseif v229 == 3 then
    return "Required Train More"
    elseif v229 == 5 then
    return "Full Gear, Full 5 Training Sessions(Full Update)"
    elseif v229 == 6 then
    return "Gear 3, Upgrades completed: " .. v228 - 2 .. "/3, Need Trains More"
    end
    if v229 ~= 8 then
    if v229 == 0 then 
        return "Ready For Trial"
    else
        return "No Gear"
    end
    end
    return "Full Gear, Remaining " .. 10 - v228 .. " training sessions."
    end

    function checkmasterydf()
        mas = 0
        for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if v:IsA("Tool") and v.ToolTip == "Blox Fruit" then
                mas = v.Level.Value
            end
        end
        for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if v:IsA("Tool") and v.ToolTip == "Blox Fruit" then
                mas = v.Level.Value
            end
        end

        return mas;
    end
    while wait(_G.time) do 
local ddr = game:GetService("Players").LocalPlayer.Data.DevilFruit.Value
local level = game:GetService("Players").LocalPlayer.Data.Level.Value
local beli = formatNumber(game:GetService("Players").LocalPlayer.Data.Beli.Value)
local fragment = formatNumber(game:GetService("Players").LocalPlayer.Data.Fragments.Value)
MyAccount:SetAlias(setalias())
MyAccount:SetDescription(checkfruit().." - "..ddr..", "..checkmasterydf().."\nAwaken: "..getawaken().."\nRace: "..checkrace().."\nLever Status: "..checkgatcan2().."\nTraining Sessions: "..CheckAcientOneStatus().."\nInventory: "..checkmirrorvamu())
    end
else print( MyAccount  )
end
